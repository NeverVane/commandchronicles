name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v0.1.0)"
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_clean=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Get build metadata
        id: metadata
        run: |
          echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "author=Leonardo Zanobi" >> $GITHUB_OUTPUT
          echo "website=https://commandchronicles.dev" >> $GITHUB_OUTPUT

      - name: Build binary
        run: |
          BINARY_NAME="ccr-${{ matrix.os }}-${{ matrix.arch }}"

          echo "Building ${{ matrix.os }}/${{ matrix.arch }} binary with pure Go..."

          # Pure Go build - no CGO needed since we use modernc.org/sqlite
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X main.version=${{ steps.version.outputs.version_clean }} -X main.commit=${{ steps.metadata.outputs.commit }} -X main.date=${{ steps.metadata.outputs.date }} -X 'main.author=${{ steps.metadata.outputs.author }}' -X main.website=${{ steps.metadata.outputs.website }} -w -s" -o "${BINARY_NAME}" .

          # Verify binary was created
          ls -la "${BINARY_NAME}"
          file "${BINARY_NAME}" || echo "file command not available"

          # Show binary info
          echo "Binary size: $(du -h ${BINARY_NAME} | cut -f1)"

      - name: Generate checksum
        run: |
          BINARY_NAME="ccr-${{ matrix.os }}-${{ matrix.arch }}"
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          echo "Generated checksum for ${BINARY_NAME}:"
          cat "${BINARY_NAME}.sha256"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ccr-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ccr-${{ matrix.os }}-${{ matrix.arch }}
            ccr-${{ matrix.os }}-${{ matrix.arch }}.sha256
          retention-days: 5

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          find ./artifacts -name "ccr-*" -type f -exec cp {} ./release-assets/ \;

          # Create combined checksums file
          cd ./release-assets
          find . -name "*.sha256" -exec cat {} \; > checksums.txt

          echo "Release assets:"
          ls -la
          echo "Checksums file:"
          cat checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          # Create release notes
          cat << 'EOF' > release_notes.md
          <div align="center">

          # 🚀 CommandChronicles CLI ${{ steps.version.outputs.version }}

          **A modern shell history management tool with secure encryption and intelligent search**

          [![Download](https://img.shields.io/badge/⬇️_Download-Latest_Release-blue?style=for-the-badge)](https://github.com/${{ github.repository }}/releases/latest)
          [![Install](https://img.shields.io/badge/⚡_Quick_Install-One_Command-green?style=for-the-badge)](#-quick-installation)

          </div>

          ---

          ## ✨ What's New in This Release

          🔐 **Secure Command History Storage** - Military-grade XChaCha20-Poly1305 encryption
          🔍 **Lightning-Fast Search** - Fuzzy search with interactive TUI interface
          🔄 **Cross-Device Sync** - Perfect synchronization across all your devices
          🐚 **Shell Integration** - Seamless hooks for bash, zsh, and fish
          📊 **Rich Context** - Capture environment, git status, and metadata
          🛡️ **Security First** - Argon2id key derivation and secure session management

          ## 📦 Quick Installation

          ### 🚀 One-Line Install (Recommended)
          ```bash
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | sh
          ```

          ### 🔧 Manual Installation
          1. **Download** the appropriate binary for your platform from the assets below
          2. **Make executable**: `chmod +x ccr-*`
          3. **Install**: `sudo mv ccr-* /usr/local/bin/ccr`
          4. **Verify**: `ccr version`

          ### 🍺 Homebrew (Coming Soon)
          ```bash
          brew install commandchronicles/tap/ccr
          ```

          ## 🏁 Quick Start

          ```bash
          # Initialize CommandChronicles
          ccr init

          # Install shell hooks for automatic history capture
          ccr install-hooks --auto

          # Search your command history
          ccr search "git commit"

          # Launch interactive TUI (like enhanced Ctrl+R)
          ccr tui
          ```

          ## 📋 Available Downloads

          | Platform | Architecture | Binary | Size | Checksum |
          |----------|-------------|---------|------|----------|
          | 🐧 **Linux** | x86_64 | [`ccr-linux-amd64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-linux-amd64) | ~15MB | [SHA256](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-linux-amd64.sha256) |
          | 🐧 **Linux** | ARM64 | [`ccr-linux-arm64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-linux-arm64) | ~14MB | [SHA256](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-linux-arm64.sha256) |
          | 🍎 **macOS** | Intel | [`ccr-darwin-amd64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-darwin-amd64) | ~15MB | [SHA256](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-darwin-amd64.sha256) |
          | 🍎 **macOS** | Apple Silicon | [`ccr-darwin-arm64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-darwin-arm64) | ~14MB | [SHA256](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/ccr-darwin-arm64.sha256) |

          ### 🔐 Security Verification

          **Verify checksums** (recommended):
          ```bash
          # Download checksums file
          curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/checksums.txt

          # Verify your downloaded binary
          sha256sum -c checksums.txt
          ```

          ## 🎯 Key Features

          <details>
          <summary><strong>🔒 Security & Privacy</strong></summary>

          - **End-to-end encryption** with XChaCha20-Poly1305 AEAD
          - **Argon2id key derivation** for password-based encryption
          - **Local-first storage** - your data never leaves your devices
          - **Secure session management** with automatic locking
          - **File permission enforcement** (0600/0700) for data protection

          </details>

          <details>
          <summary><strong>🔍 Search & Discovery</strong></summary>

          - **Fuzzy search** with real-time filtering
          - **Interactive TUI** with keyboard shortcuts
          - **Metadata filtering** by date, directory, exit code, etc.
          - **Intelligent ranking** based on frequency and recency
          - **Regular expression support** for advanced queries

          </details>

          <details>
          <summary><strong>🔄 Sync & Backup</strong></summary>

          - **Perfect synchronization** across multiple devices
          - **Conflict resolution** with merge strategies
          - **Incremental sync** for bandwidth efficiency
          - **Integrity verification** with cryptographic hashes
          - **Import/export** from existing shell histories

          </details>

          ## 🔄 Updating

          If you already have CommandChronicles CLI installed:

          ```bash
          # Using the built-in updater
          ccr update

          # Or reinstall with the install script
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | sh
          ```

          ## 🆘 Support & Documentation

          - 📚 **[Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)**
          - 🐛 **[Report Issues](https://github.com/${{ github.repository }}/issues)**
          - 💬 **[Discussions](https://github.com/${{ github.repository }}/discussions)**
          - 🔧 **[Contributing Guide](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)**

          ## 🎉 What's Next?

          - 🌐 **Web dashboard** for command analytics
          - 📱 **Mobile app** for remote command execution
          - 🤖 **AI-powered suggestions** based on your history
          - 🔌 **Plugin system** for extensibility

          ---

          <div align="center">

          **Built with ❤️ by Leonardo Zanobi**

          ⭐ **Star this repo if you find it useful!** ⭐

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ steps.version.outputs.version }}

          </div>
          EOF

          echo "Generated release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "🚀 CommandChronicles CLI ${{ steps.version.outputs.version }} - Secure Shell History Management"
          body_path: release_notes.md
          make_latest: true
          discussion_category_name: "Releases"
          files: |
            ./release-assets/ccr-linux-amd64
            ./release-assets/ccr-linux-amd64.sha256
            ./release-assets/ccr-linux-arm64
            ./release-assets/ccr-linux-arm64.sha256
            ./release-assets/ccr-darwin-amd64
            ./release-assets/ccr-darwin-amd64.sha256
            ./release-assets/ccr-darwin-arm64
            ./release-assets/ccr-darwin-arm64.sha256
            ./release-assets/checksums.txt
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-rc') || contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') || contains(steps.version.outputs.version, '-dev') }}
          generate_release_notes: false
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            ccr-linux-amd64
            ccr-linux-arm64
            ccr-darwin-amd64
            ccr-darwin-arm64
          failOnError: false

  notify:
    name: Post-Release Notifications
    needs: [build, release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Release Success
        run: |
          echo "🎉 Release ${{ github.ref_name }} completed successfully!"
          echo "📦 Binaries built for 4 platforms (Linux and macOS)"
          echo "✅ GitHub release created with enhanced formatting"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "📊 Release features: Direct download links, security verification, quick start guide"
          echo "🚀 Installation command: curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | sh"
